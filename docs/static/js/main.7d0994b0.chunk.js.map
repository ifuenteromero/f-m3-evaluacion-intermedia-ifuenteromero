{"version":3,"sources":["components/Pokemon.js","components/Pokelist.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","pokemon","this","props","react_default","a","createElement","className","src","url","alt","name","types","map","type","index","key","React","Component","Pokelist","list","components_Pokemon","id","evolution","App","components_Pokelist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAsBeA,0LAnBF,IACGC,EAAYC,KAAKC,MAAjBF,QACR,OACIG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAENH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAQQ,IAAKC,IAAKT,EAAQU,OACpCP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBN,EAAQU,MACxCP,EAAAC,EAAAC,cAAA,UAAKL,EAAQW,MAAMC,IAAI,SAACC,EAAKC,GAAN,OAClBX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,GAAQD,cATpBG,IAAMC,YCYbC,mLARX,OADejB,KAAKC,MAAbiB,KACKP,IAAI,SAACZ,EAAQc,GAAT,OAAkBX,EAAAC,EAAAC,cAACe,EAAD,CAASpB,QAAWA,EAASe,IAAKD,aAJjDE,IAAMC,WCEvBjB,EAAU,CACd,CAACqB,GAAK,EAAEX,KAAO,YAAYC,MAAQ,CAAC,SAAS,SAASW,UAAY,KAAKd,IAAM,kFAC7E,CAACa,GAAK,EAAEX,KAAO,UAAUC,MAAQ,CAAC,SAAS,SAASW,UAAY,YAAYd,IAAM,kFAClF,CAACa,GAAK,EAAEX,KAAO,WAAWC,MAAQ,CAAC,SAAS,SAASW,UAAY,UAAUd,IAAM,kFACjF,CAACa,GAAK,EAAEX,KAAO,aAAaC,MAAQ,CAAC,QAAQW,UAAY,KAAKd,IAAM,kFACpE,CAACa,GAAK,EAAEX,KAAO,aAAaC,MAAQ,CAAC,QAAQW,UAAY,aAAad,IAAM,kFAC5E,CAACa,GAAK,EAAEX,KAAO,YAAYC,MAAQ,CAAC,SAAS,QAAQW,UAAY,aAAad,IAAM,kFACpF,CAACa,GAAK,EAAEX,KAAO,WAAWC,MAAQ,CAAC,SAASW,UAAY,KAAKd,IAAM,kFACnE,CAACa,GAAK,EAAEX,KAAO,YAAYC,MAAQ,CAAC,SAASW,UAAY,WAAWd,IAAM,kFAC1E,CAACa,GAAK,EAAEX,KAAO,YAAYC,MAAQ,CAAC,SAASW,UAAY,YAAYd,IAAM,kFAC3E,CAACa,GAAK,GAAGX,KAAO,WAAWC,MAAQ,CAAC,OAAOW,UAAY,KAAKd,IAAM,oFAarDe,mLARX,OACEpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACdH,EAAAC,EAAAC,cAACmB,EAAD,CAAUL,KAAOnB,YAJLgB,IAAMC,WCLJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d0994b0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Pokemon extends React.Component {\n    render() {\n        const { pokemon } = this.props;\n        return (\n            <li className=\"pokemon__container\">\n                \n                    <img src={pokemon.url} alt={pokemon.name} />\n                    <h1 className=\"pokemon__title\">{pokemon.name}</h1>\n                    <ul>{pokemon.types.map((type,index) =>\n                         <li key={index}>{type}</li>)}</ul>\n               \n            </li>\n        );\n    }\n\n\n}\n\n\n\nexport default Pokemon;","import React from 'react';\nimport Pokemon from './Pokemon';\nclass Pokelist extends React.Component{\n\nrender(){\n    const {list} = this.props;\n    return(list.map((pokemon,index)=> <Pokemon pokemon = {pokemon} key={index}/>));\n}\n\n}\n\n\n\n\nexport default Pokelist; ","import React from 'react';\nimport './App.css';\nimport Pokelist from './components/Pokelist'\n\nconst pokemon = [\n  {\"id\":1,\"name\":\"bulbasaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"},\n  {\"id\":2,\"name\":\"ivysaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"bulbasaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"},\n  {\"id\":3,\"name\":\"venusaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"ivysaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"},\n  {\"id\":4,\"name\":\"charmander\",\"types\":[\"fire\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"},\n  {\"id\":5,\"name\":\"charmeleon\",\"types\":[\"fire\"],\"evolution\":\"charmander\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"},\n  {\"id\":6,\"name\":\"charizard\",\"types\":[\"flying\",\"fire\"],\"evolution\":\"charmeleon\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"},\n  {\"id\":7,\"name\":\"squirtle\",\"types\":[\"water\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"},\n  {\"id\":8,\"name\":\"wartortle\",\"types\":[\"water\"],\"evolution\":\"squirtle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"},\n  {\"id\":9,\"name\":\"blastoise\",\"types\":[\"water\"],\"evolution\":\"wartortle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"},\n  {\"id\":10,\"name\":\"caterpie\",\"types\":[\"bug\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"}\n];\n\nclass App extends React.Component{\n  render(){\n    return(\n      <ul className=\"cards__container\">\n      <Pokelist list ={pokemon}/>\n      </ul>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}